{
  "language": "Solidity",
  "sources": {
    "contracts/xChainFed.sol": {
      "content": "//SPDX-License-Identifier: None\npragma solidity 0.8.9;\n\ninterface ERC20 {\n    function approve(address,uint) external returns (bool);\n    function balanceOf(address) external view returns (uint);\n    function mint(address,uint) external; // only on src chain\n    function burn(uint) external; // only on src chain\n    function Swapout(uint,address) external returns (bool);\n    function transfer(address,uint) external returns (bool);\n}\n\ninterface CErc20 {\n    function mint(uint) external returns (uint);\n    function redeemUnderlying(uint) external returns (uint);\n    function balanceOfUnderlying(address) external returns (uint);\n}\n\ncontract xChainFed {\n\n    // Shared\n\n    address public constant GOV = 0x926dF14a23BE491164dCF93f4c468A50ef659D5B;\n    address public chair = 0x3FcB35a1CbFB6007f9BC638D388958Bc4550cB28;\n    \n    modifier onlyChair {\n        require(msg.sender == chair || msg.sender == GOV, \"ONLY CHAIN OR GOV\");\n        _;\n    }\n\n    function changeChair(address newChair_) public onlyChair {\n        chair = newChair_;\n    }\n\n    function sweep(ERC20 token, address to) public onlyChair {\n        require(token != SRC_DEW && token != DST_DEW && token != ERC20(address(DST_MARKET)), \"cannot steal DEW\");\n        token.transfer(to, token.balanceOf(address(this)));\n    }\n\n    // Source side (Ethereum)\n\n    ERC20 public constant SRC_DEW = ERC20(0x865377367054516e17014CcdED1e7d814EDC9ce4);\n    address public constant SRC_BRIDGE = 0xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE;\n\n    modifier onlySrc {\n        require(block.chainid == 1, \"WRONG CHAIN\");\n        _;\n    }\n\n    function srcMintReserves(uint amount) public onlyChair onlySrc {\n        SRC_DEW.mint(address(this), amount);\n    }\n\n    function srcBurnReserves(uint amount) public onlyChair onlySrc {\n        SRC_DEW.burn(amount);\n    }\n\n    function srcTransferReservesToDst(uint amount) public onlyChair onlySrc {\n        SRC_DEW.transfer(SRC_BRIDGE, amount);\n    }\n\n    // Destination side (Fantom)\n    \n    ERC20 public constant DST_DEW = ERC20(0x3129662808bEC728a27Ab6a6b9AFd3cBacA8A43c);\n    CErc20 public constant DST_MARKET = CErc20(0x5A3B9Dcdd462f264eC1bD56D618BF4552C2EaF8A);\n    address public dstBoard;\n    uint public dstSupply;\n    uint public dstLastSuspendTimestamp;\n    uint constant SUSPENSION_DURATION = 2 weeks;\n    uint constant DUST = 5000 ether; // 5000 DEW minimum sent across the bridge\n\n    modifier onlyDst {\n        require(block.chainid != 1, \"WRONG CHAIN\");\n        _;\n    }\n\n    function dstSetBoard(address newBoard) public onlyDst {\n        if(dstBoard == address(0)) {\n            require(msg.sender == chair, \"ONLY CHAIR CAN SET BOARD FOR THE FIRST TIME\");\n        } else {\n            require(msg.sender == dstBoard, \"ONLY BOARD CAN CHANGE ITS OWN ADDRESS\");\n        }\n        dstBoard = newBoard;\n    }\n\n    function dstIsChairSuspended() public view onlyDst returns (bool) {\n        return dstLastSuspendTimestamp + SUSPENSION_DURATION > block.timestamp;\n    }\n\n    function dstSuspendChair() public onlyDst {\n        require(msg.sender == dstBoard, \"ONLY BOARD CAN SUSPEND CHAIR\");\n        require(!dstIsChairSuspended(), \"CHAIR ALREADY SUSPENDED\");\n        dstLastSuspendTimestamp = block.timestamp;\n    }\n    \n    function dstUnsuspendChair() public onlyDst {\n        require(msg.sender == dstBoard, \"ONLY BOARD CAN UNSUSPEND CHAIR\");\n        require(dstIsChairSuspended(), \"CHAIR NOT SUSPENDED\");\n        dstLastSuspendTimestamp = 0;\n    }\n\n    function dstTransferReservesToSrc(uint amount) public onlyDst {\n        require(msg.sender == chair || msg.sender == dstBoard, \"Only chair or board can transfer reserves to source\");\n        require(amount >= DUST);\n        require(DST_DEW.Swapout(amount, address(this)));\n    }\n\n    function dstExpansion(uint amount) public onlyChair onlyDst {\n        require(!dstIsChairSuspended(), \"Chair is suspended\");\n        DST_DEW.approve(address(DST_MARKET), amount);\n        require(DST_MARKET.mint(amount) == 0, 'Supplying failed');\n        dstSupply = dstSupply + amount;\n        emit Expansion(amount);\n    }\n\n    function dstContraction(uint amount) public onlyDst {\n        require(msg.sender == chair || msg.sender == dstBoard, \"Only chair or board can call contraction\");\n        require(amount <= dstSupply, \"AMOUNT TOO BIG\"); // can't burn profits\n        require(DST_MARKET.redeemUnderlying(amount) == 0, \"Redeem failed\");\n        dstSupply = dstSupply - amount;\n        emit Contraction(amount);\n    }\n\n    function dstSendProfitToGov() public onlyDst {\n        uint underlyingBalance = DST_MARKET.balanceOfUnderlying(address(this));\n        uint profit = underlyingBalance - dstSupply;\n        require(profit >= DUST, \"Not enough profit\");\n        require(DST_MARKET.redeemUnderlying(profit) == 0, \"Redeem failed\");\n        require(DST_DEW.Swapout(profit, GOV));\n    }\n\n    event Expansion(uint amount);\n    event Contraction(uint amount);\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}